
RWS AROBS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000001cc  00000260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080006a  0080006a  0000026a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008e9  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d9  00000000  00000000  00000c41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004aa  00000000  00000000  0000131a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  000017c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040d  00000000  00000000  0000189c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000176  00000000  00000000  00001ca9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001e1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	90 c0       	rjmp	.+288    	; 0x134 <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec ec       	ldi	r30, 0xCC	; 204
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	aa 36       	cpi	r26, 0x6A	; 106
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	aa e6       	ldi	r26, 0x6A	; 106
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 37       	cpi	r26, 0x70	; 112
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	43 d0       	rcall	.+134    	; 0xe0 <main>
  5a:	b6 c0       	rjmp	.+364    	; 0x1c8 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <ControlPin>:
	}
}
void ControlPin(EN_Port_Type Port2Control, uint8_t pinNr, bool pinState)
{
	static uint16_t counter = 0;
	counter++;
  5e:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <__data_end>
  62:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <__data_end+0x1>
  66:	2f 5f       	subi	r18, 0xFF	; 255
  68:	3f 4f       	sbci	r19, 0xFF	; 255
  6a:	30 93 6b 00 	sts	0x006B, r19	; 0x80006b <__data_end+0x1>
  6e:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__data_end>
	switch(Port2Control) {
  72:	81 30       	cpi	r24, 0x01	; 1
  74:	19 f0       	breq	.+6      	; 0x7c <ControlPin+0x1e>
  76:	82 30       	cpi	r24, 0x02	; 2
  78:	d1 f0       	breq	.+52     	; 0xae <ControlPin+0x50>
  7a:	08 95       	ret
		case (BPort):
			if (pinState) {
  7c:	44 23       	and	r20, r20
  7e:	59 f0       	breq	.+22     	; 0x96 <ControlPin+0x38>
				SETPORTB(pinNr);
  80:	28 b3       	in	r18, 0x18	; 24
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	02 c0       	rjmp	.+4      	; 0x8c <ControlPin+0x2e>
  88:	88 0f       	add	r24, r24
  8a:	99 1f       	adc	r25, r25
  8c:	6a 95       	dec	r22
  8e:	e2 f7       	brpl	.-8      	; 0x88 <ControlPin+0x2a>
  90:	82 2b       	or	r24, r18
  92:	88 bb       	out	0x18, r24	; 24
  94:	08 95       	ret
			} else {
				CLEARPORTB(pinNr);
  96:	28 b3       	in	r18, 0x18	; 24
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <ControlPin+0x44>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <ControlPin+0x40>
  a6:	80 95       	com	r24
  a8:	82 23       	and	r24, r18
  aa:	88 bb       	out	0x18, r24	; 24
  ac:	08 95       	ret
			}
		break;
		case(CPort):
			if(pinState){
  ae:	44 23       	and	r20, r20
  b0:	59 f0       	breq	.+22     	; 0xc8 <ControlPin+0x6a>
				SETPORTC(pinNr);
  b2:	25 b3       	in	r18, 0x15	; 21
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <ControlPin+0x60>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <ControlPin+0x5c>
  c2:	82 2b       	or	r24, r18
  c4:	85 bb       	out	0x15, r24	; 21
  c6:	08 95       	ret
			} else {
				CLEARPORTC(pinNr);	
  c8:	25 b3       	in	r18, 0x15	; 21
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <ControlPin+0x76>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <ControlPin+0x72>
  d8:	80 95       	com	r24
  da:	82 23       	and	r24, r18
  dc:	85 bb       	out	0x15, r24	; 21
  de:	08 95       	ret

000000e0 <main>:
{
	static bool pinstate = true;
	unsigned char i; 
	//cli();
	//Timer0Init();
	UARTInit(MyUBBR);
  e0:	8c e0       	ldi	r24, 0x0C	; 12
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	52 d0       	rcall	.+164    	; 0x18a <UARTInit>
	//sei();
	DDRC = 0xFF;
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	84 bb       	out	0x14, r24	; 20
	DDRB |= 0x18;
  ea:	87 b3       	in	r24, 0x17	; 23
  ec:	88 61       	ori	r24, 0x18	; 24
  ee:	87 bb       	out	0x17, r24	; 23
	ControlPin(BPort,3,0);
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	63 e0       	ldi	r22, 0x03	; 3
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	b3 df       	rcall	.-154    	; 0x5e <ControlPin>
	ControlPin(BPort,4,0);
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	64 e0       	ldi	r22, 0x04	; 4
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	af df       	rcall	.-162    	; 0x5e <ControlPin>
	UARTSendString("ARDUINO");
 100:	81 e6       	ldi	r24, 0x61	; 97
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	53 d0       	rcall	.+166    	; 0x1ac <UARTSendString>
	
    /* Replace with your application code */
    while (1) 
    {
		ControlPin(CPort,5,pinstate);
		pinstate^=1;
 106:	d1 e0       	ldi	r29, 0x01	; 1
	UARTSendString("ARDUINO");
	
    /* Replace with your application code */
    while (1) 
    {
		ControlPin(CPort,5,pinstate);
 108:	c0 91 60 00 	lds	r28, 0x0060	; 0x800060 <__data_start>
 10c:	4c 2f       	mov	r20, r28
 10e:	65 e0       	ldi	r22, 0x05	; 5
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	a5 df       	rcall	.-182    	; 0x5e <ControlPin>
		pinstate^=1;
 114:	8c 2f       	mov	r24, r28
 116:	8d 27       	eor	r24, r29
 118:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		UARTSendChar(pinstate + 0x30);
 11c:	80 5d       	subi	r24, 0xD0	; 208
 11e:	42 d0       	rcall	.+132    	; 0x1a4 <UARTSendChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	84 e3       	ldi	r24, 0x34	; 52
 124:	9c e0       	ldi	r25, 0x0C	; 12
 126:	21 50       	subi	r18, 0x01	; 1
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x46>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x50>
 130:	00 00       	nop
 132:	ea cf       	rjmp	.-44     	; 0x108 <main+0x28>

00000134 <__vector_9>:
	TIMSK |= (1<<TOIE0);
	DDRC = 0X30;	
}
	
ISR(TIMER0_OVF_vect)
{
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
	PORTC ^= 0X30;
 146:	95 b3       	in	r25, 0x15	; 21
 148:	80 e3       	ldi	r24, 0x30	; 48
 14a:	89 27       	eor	r24, r25
 14c:	85 bb       	out	0x15, r24	; 21
	GlobalMillTimer ++;
 14e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <GlobalMillTimer>
 152:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <GlobalMillTimer+0x1>
 156:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <GlobalMillTimer+0x2>
 15a:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <GlobalMillTimer+0x3>
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	a1 1d       	adc	r26, r1
 162:	b1 1d       	adc	r27, r1
 164:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <GlobalMillTimer>
 168:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <GlobalMillTimer+0x1>
 16c:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <GlobalMillTimer+0x2>
 170:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <GlobalMillTimer+0x3>
	TCNT0 = (193);
 174:	81 ec       	ldi	r24, 0xC1	; 193
 176:	82 bf       	out	0x32, r24	; 50
 178:	bf 91       	pop	r27
 17a:	af 91       	pop	r26
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <UARTInit>:
 */ 
#include <stdint.h>
#include "UARTModule.h"
#include <avr/io.h>
void UARTInit(uint16_t ubrr){
	UCSRA = 0x00; // turn everything off
 18a:	1b b8       	out	0x0b, r1	; 11
	UCSRB = 0x00;
 18c:	1a b8       	out	0x0a, r1	; 10
	UCSRC = 0x00;
 18e:	10 bc       	out	0x20, r1	; 32
	UCSRA = (1<<U2X); // to increase precision use U2X
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	8b b9       	out	0x0b, r24	; 11
	UBRRH = 0;//(uint8_t)(ubrr>>8);
 194:	10 bc       	out	0x20, r1	; 32
	UBRRL = 12;//(uint8_t)(ubrr);
 196:	8c e0       	ldi	r24, 0x0C	; 12
 198:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<TXEN)/*|(1<<RXEN)|(1<<RXCIE)*/;
 19a:	88 e0       	ldi	r24, 0x08	; 8
 19c:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
 19e:	86 e8       	ldi	r24, 0x86	; 134
 1a0:	80 bd       	out	0x20, r24	; 32
 1a2:	08 95       	ret

000001a4 <UARTSendChar>:
}

void UARTSendChar(uint8_t uartMessage){
	while (!(UCSRA & (1<<UDRE))){}
 1a4:	5d 9b       	sbis	0x0b, 5	; 11
 1a6:	fe cf       	rjmp	.-4      	; 0x1a4 <UARTSendChar>
	UDR = uartMessage;
 1a8:	8c b9       	out	0x0c, r24	; 12
 1aa:	08 95       	ret

000001ac <UARTSendString>:
	
}



void UARTSendString(char* myString){
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	ec 01       	movw	r28, r24
	while(*myString){
 1b2:	88 81       	ld	r24, Y
 1b4:	88 23       	and	r24, r24
 1b6:	29 f0       	breq	.+10     	; 0x1c2 <UARTSendString+0x16>
 1b8:	21 96       	adiw	r28, 0x01	; 1
		UARTSendChar(*myString);
 1ba:	f4 df       	rcall	.-24     	; 0x1a4 <UARTSendChar>
}



void UARTSendString(char* myString){
	while(*myString){
 1bc:	89 91       	ld	r24, Y+
 1be:	81 11       	cpse	r24, r1
 1c0:	fc cf       	rjmp	.-8      	; 0x1ba <UARTSendString+0xe>
		UARTSendChar(*myString);
		myString++;
	}
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <_exit>:
 1c8:	f8 94       	cli

000001ca <__stop_program>:
 1ca:	ff cf       	rjmp	.-2      	; 0x1ca <__stop_program>
