
RWS AROBS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00000230  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000851  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000680  00000000  00000000  00000b75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000455  00000000  00000000  000011f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  0000164c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c9  00000000  00000000  00001738  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000168  00000000  00000000  00001b01  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001c69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	ab c0       	rjmp	.+342    	; 0x16a <__vector_9>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a6 36       	cpi	r26, 0x66	; 102
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	6a d0       	rcall	.+212    	; 0x118 <main>
  44:	b9 c0       	rjmp	.+370    	; 0x1b8 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <ControlPin>:
} 
}
void ControlPin(EN_Port_Type Port2Control, uint8_t pinNr, bool pinState)
{
	static uint16_t counter = 0;
	counter++;
  48:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
  4c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <_edata+0x1>
  50:	2f 5f       	subi	r18, 0xFF	; 255
  52:	3f 4f       	sbci	r19, 0xFF	; 255
  54:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <_edata+0x1>
  58:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <_edata>
	switch(Port2Control) {
  5c:	82 30       	cpi	r24, 0x02	; 2
  5e:	f1 f0       	breq	.+60     	; 0x9c <ControlPin+0x54>
  60:	83 30       	cpi	r24, 0x03	; 3
  62:	a9 f1       	breq	.+106    	; 0xce <ControlPin+0x86>
  64:	81 30       	cpi	r24, 0x01	; 1
  66:	09 f0       	breq	.+2      	; 0x6a <ControlPin+0x22>
  68:	4a c0       	rjmp	.+148    	; 0xfe <ControlPin+0xb6>
		case (BPort):
			if (pinState) {
  6a:	44 23       	and	r20, r20
  6c:	59 f0       	breq	.+22     	; 0x84 <ControlPin+0x3c>
				SETPORTB(pinNr);
  6e:	28 b3       	in	r18, 0x18	; 24
  70:	81 e0       	ldi	r24, 0x01	; 1
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	02 c0       	rjmp	.+4      	; 0x7a <ControlPin+0x32>
  76:	88 0f       	add	r24, r24
  78:	99 1f       	adc	r25, r25
  7a:	6a 95       	dec	r22
  7c:	e2 f7       	brpl	.-8      	; 0x76 <ControlPin+0x2e>
  7e:	82 2b       	or	r24, r18
  80:	88 bb       	out	0x18, r24	; 24
  82:	08 95       	ret
			} else {
				CLEARPORTB(pinNr);
  84:	28 b3       	in	r18, 0x18	; 24
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	02 c0       	rjmp	.+4      	; 0x90 <ControlPin+0x48>
  8c:	88 0f       	add	r24, r24
  8e:	99 1f       	adc	r25, r25
  90:	6a 95       	dec	r22
  92:	e2 f7       	brpl	.-8      	; 0x8c <ControlPin+0x44>
  94:	80 95       	com	r24
  96:	82 23       	and	r24, r18
  98:	88 bb       	out	0x18, r24	; 24
  9a:	08 95       	ret
			}
		break;
		case(CPort):
			if(pinState){
  9c:	44 23       	and	r20, r20
  9e:	59 f0       	breq	.+22     	; 0xb6 <ControlPin+0x6e>
				SETPORTC(pinNr);
  a0:	25 b3       	in	r18, 0x15	; 21
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	02 c0       	rjmp	.+4      	; 0xac <ControlPin+0x64>
  a8:	88 0f       	add	r24, r24
  aa:	99 1f       	adc	r25, r25
  ac:	6a 95       	dec	r22
  ae:	e2 f7       	brpl	.-8      	; 0xa8 <ControlPin+0x60>
  b0:	82 2b       	or	r24, r18
  b2:	85 bb       	out	0x15, r24	; 21
  b4:	08 95       	ret
			} else {
				CLEARPORTC(pinNr);	
  b6:	25 b3       	in	r18, 0x15	; 21
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <ControlPin+0x7a>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <ControlPin+0x76>
  c6:	80 95       	com	r24
  c8:	82 23       	and	r24, r18
  ca:	85 bb       	out	0x15, r24	; 21
  cc:	08 95       	ret
			}
		break;
		case (DPort):
			if(pinState){
  ce:	44 23       	and	r20, r20
  d0:	59 f0       	breq	.+22     	; 0xe8 <ControlPin+0xa0>
				SETPORTD(pinNr);
  d2:	22 b3       	in	r18, 0x12	; 18
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <ControlPin+0x96>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <ControlPin+0x92>
  e2:	82 2b       	or	r24, r18
  e4:	82 bb       	out	0x12, r24	; 18
  e6:	08 95       	ret
			}else{
				CLEARPORTD(pinNr);
  e8:	22 b3       	in	r18, 0x12	; 18
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <ControlPin+0xac>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <ControlPin+0xa8>
  f8:	80 95       	com	r24
  fa:	82 23       	and	r24, r18
  fc:	82 bb       	out	0x12, r24	; 18
  fe:	08 95       	ret

00000100 <EspOff>:
	}
	UartSendNewLine();
}
void EspOff(void)
{
	DDRD |= 0XC0;
 100:	81 b3       	in	r24, 0x11	; 17
 102:	80 6c       	ori	r24, 0xC0	; 192
 104:	81 bb       	out	0x11, r24	; 17
	ControlPin(ESP_RESET_PORT,ESP_RESET_PIN,0);
 106:	40 e0       	ldi	r20, 0x00	; 0
 108:	67 e0       	ldi	r22, 0x07	; 7
 10a:	83 e0       	ldi	r24, 0x03	; 3
 10c:	9d df       	rcall	.-198    	; 0x48 <ControlPin>
	ControlPin(ESP_ENABLE_PORT,ESP_ENABLE_PIN,0);	
 10e:	40 e0       	ldi	r20, 0x00	; 0
 110:	66 e0       	ldi	r22, 0x06	; 6
 112:	83 e0       	ldi	r24, 0x03	; 3
 114:	99 df       	rcall	.-206    	; 0x48 <ControlPin>
 116:	08 95       	ret

00000118 <main>:
}

int main(void)
{
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	1f 92       	push	r1
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
	
	static char pinstate = true;
	unsigned char i; 
	volatile unsigned char oldi = 0; //to check when the i variable change the value
 122:	19 82       	std	Y+1, r1	; 0x01
	DDRD |= (1<< STATUS_LED_PIN);
 124:	8c 9a       	sbi	0x11, 4	; 17
	DDRB |= (1<< SPI_SS_PIN); //set PB0 to output because the SPI Slave select
 126:	b8 9a       	sbi	0x17, 0	; 23
	
	cli();
 128:	f8 94       	cli
	//Timer0Init();
	//UARTInit(MyUBBR);
	//sei();
	EspOff();	
 12a:	ea df       	rcall	.-44     	; 0x100 <EspOff>
	//UartSendUdec(GlobalMillTimer);
	//UartSendNewLine();
	SPIInit();
 12c:	17 d0       	rcall	.+46     	; 0x15c <SPIInit>
    while (1) 
    {
		
		SPI_CLEAR_SS;
		//SPISendByte(0x55);
		SPDR ^= 0x55;
 12e:	15 e5       	ldi	r17, 0x55	; 85
    /* Replace with your application code */
	//DDRB |= (1<<5)|(1<<3);
    while (1) 
    {
		
		SPI_CLEAR_SS;
 130:	40 e0       	ldi	r20, 0x00	; 0
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	88 df       	rcall	.-240    	; 0x48 <ControlPin>
		//SPISendByte(0x55);
		SPDR ^= 0x55;
 138:	8f b1       	in	r24, 0x0f	; 15
 13a:	81 27       	eor	r24, r17
 13c:	8f b9       	out	0x0f, r24	; 15
		ControlPin(STATUS_LED_PORT,STATUS_LED_PIN,0);
 13e:	40 e0       	ldi	r20, 0x00	; 0
 140:	64 e0       	ldi	r22, 0x04	; 4
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	81 df       	rcall	.-254    	; 0x48 <ControlPin>
		while(!(SPSR & (1<<SPIF)))
 146:	77 9b       	sbis	0x0e, 7	; 14
 148:	fe cf       	rjmp	.-4      	; 0x146 <main+0x2e>
		;
		ControlPin(STATUS_LED_PORT,STATUS_LED_PIN,1);
 14a:	41 e0       	ldi	r20, 0x01	; 1
 14c:	64 e0       	ldi	r22, 0x04	; 4
 14e:	83 e0       	ldi	r24, 0x03	; 3
 150:	7b df       	rcall	.-266    	; 0x48 <ControlPin>
		SPI_SET_SS;
 152:	41 e0       	ldi	r20, 0x01	; 1
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	77 df       	rcall	.-274    	; 0x48 <ControlPin>

		oldi = i;
	} 
#endif	
	
} 
 15a:	ea cf       	rjmp	.-44     	; 0x130 <main+0x18>

0000015c <SPIInit>:
#include <stdint.h>
#include "SPIModule.h"

void SPIInit(void)
{
	DDRB |= (1<<5)|(1<<3)|(1<<2);
 15c:	87 b3       	in	r24, 0x17	; 23
 15e:	8c 62       	ori	r24, 0x2C	; 44
 160:	87 bb       	out	0x17, r24	; 23

	//SPCR = 0;
	//SPSR = 0;
	//SPSR |= (1<<SPI2X);
	SPCR |= (1<<SPE)|(1<<MSTR)/*|(1<<CPOL)|(1<<CPHA)|(1<<SPR0)*/|(1<<SPR1);	
 162:	8d b1       	in	r24, 0x0d	; 13
 164:	82 65       	ori	r24, 0x52	; 82
 166:	8d b9       	out	0x0d, r24	; 13
 168:	08 95       	ret

0000016a <__vector_9>:
	TCNT0 = (193);
	TIMSK |= (1<<TOIE0);
}
	
ISR(TIMER0_OVF_vect)
{
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	8f 93       	push	r24
 176:	9f 93       	push	r25
 178:	af 93       	push	r26
 17a:	bf 93       	push	r27
	GlobalMillTimer ++;
 17c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <GlobalMillTimer>
 180:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <GlobalMillTimer+0x1>
 184:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <GlobalMillTimer+0x2>
 188:	b0 91 65 00 	lds	r27, 0x0065	; 0x800065 <GlobalMillTimer+0x3>
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	a1 1d       	adc	r26, r1
 190:	b1 1d       	adc	r27, r1
 192:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <GlobalMillTimer>
 196:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <GlobalMillTimer+0x1>
 19a:	a0 93 64 00 	sts	0x0064, r26	; 0x800064 <GlobalMillTimer+0x2>
 19e:	b0 93 65 00 	sts	0x0065, r27	; 0x800065 <GlobalMillTimer+0x3>
	TCNT0 = (193);
 1a2:	81 ec       	ldi	r24, 0xC1	; 193
 1a4:	82 bf       	out	0x32, r24	; 50
	//PORTB ^= (1<<5);
 1a6:	bf 91       	pop	r27
 1a8:	af 91       	pop	r26
 1aa:	9f 91       	pop	r25
 1ac:	8f 91       	pop	r24
 1ae:	0f 90       	pop	r0
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	0f 90       	pop	r0
 1b4:	1f 90       	pop	r1
 1b6:	18 95       	reti

000001b8 <_exit>:
 1b8:	f8 94       	cli

000001ba <__stop_program>:
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <__stop_program>
