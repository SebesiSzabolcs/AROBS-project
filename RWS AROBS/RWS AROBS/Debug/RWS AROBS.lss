
RWS AROBS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000254  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  000002c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000995  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f8  00000000  00000000  00000d61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d7  00000000  00000000  00001459  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  00001930  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000404  00000000  00000000  00001a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000233  00000000  00000000  00001e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002093  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	a0 c0       	rjmp	.+320    	; 0x154 <__vector_9>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a6 36       	cpi	r26, 0x66	; 102
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	43 d0       	rcall	.+134    	; 0xca <main>
  44:	05 c1       	rjmp	.+522    	; 0x250 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <ControlPin>:
} 
}
void ControlPin(EN_Port_Type Port2Control, uint8_t pinNr, bool pinState)
{
	static uint16_t counter = 0;
	counter++;
  48:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
  4c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <_edata+0x1>
  50:	2f 5f       	subi	r18, 0xFF	; 255
  52:	3f 4f       	sbci	r19, 0xFF	; 255
  54:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <_edata+0x1>
  58:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <_edata>
	switch(Port2Control) {
  5c:	81 30       	cpi	r24, 0x01	; 1
  5e:	19 f0       	breq	.+6      	; 0x66 <ControlPin+0x1e>
  60:	82 30       	cpi	r24, 0x02	; 2
  62:	d1 f0       	breq	.+52     	; 0x98 <ControlPin+0x50>
  64:	08 95       	ret
		case (BPort):
			if (pinState) {
  66:	44 23       	and	r20, r20
  68:	59 f0       	breq	.+22     	; 0x80 <ControlPin+0x38>
				SETPORTB(pinNr);
  6a:	28 b3       	in	r18, 0x18	; 24
  6c:	81 e0       	ldi	r24, 0x01	; 1
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	02 c0       	rjmp	.+4      	; 0x76 <ControlPin+0x2e>
  72:	88 0f       	add	r24, r24
  74:	99 1f       	adc	r25, r25
  76:	6a 95       	dec	r22
  78:	e2 f7       	brpl	.-8      	; 0x72 <ControlPin+0x2a>
  7a:	82 2b       	or	r24, r18
  7c:	88 bb       	out	0x18, r24	; 24
  7e:	08 95       	ret
			} else {
				CLEARPORTB(pinNr);
  80:	28 b3       	in	r18, 0x18	; 24
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	02 c0       	rjmp	.+4      	; 0x8c <ControlPin+0x44>
  88:	88 0f       	add	r24, r24
  8a:	99 1f       	adc	r25, r25
  8c:	6a 95       	dec	r22
  8e:	e2 f7       	brpl	.-8      	; 0x88 <ControlPin+0x40>
  90:	80 95       	com	r24
  92:	82 23       	and	r24, r18
  94:	88 bb       	out	0x18, r24	; 24
  96:	08 95       	ret
			}
		break;
		case(CPort):
			if(pinState){
  98:	44 23       	and	r20, r20
  9a:	59 f0       	breq	.+22     	; 0xb2 <ControlPin+0x6a>
				SETPORTC(pinNr);
  9c:	25 b3       	in	r18, 0x15	; 21
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <ControlPin+0x60>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <ControlPin+0x5c>
  ac:	82 2b       	or	r24, r18
  ae:	85 bb       	out	0x15, r24	; 21
  b0:	08 95       	ret
			} else {
				CLEARPORTC(pinNr);	
  b2:	25 b3       	in	r18, 0x15	; 21
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <ControlPin+0x76>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <ControlPin+0x72>
  c2:	80 95       	com	r24
  c4:	82 23       	and	r24, r18
  c6:	85 bb       	out	0x15, r24	; 21
  c8:	08 95       	ret

000000ca <main>:
		UARTSendChar((uint8_t)MyValue);
	}
	UartSendNewLine();
}
int main(void)
{
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	00 d0       	rcall	.+0      	; 0xd0 <main+0x6>
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
	static bool pinstate = true;
	volatile unsigned char i; 
	volatile unsigned char oldi = 0; //to check when the i variable change the value
  d4:	1a 82       	std	Y+2, r1	; 0x02
	cli();
  d6:	f8 94       	cli
	Timer0Init();
  d8:	35 d0       	rcall	.+106    	; 0x144 <Timer0Init>
	UARTInit(MyUBBR);
  da:	8c e0       	ldi	r24, 0x0C	; 12
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	61 d0       	rcall	.+194    	; 0x1a2 <UARTInit>
	sei();
  e0:	78 94       	sei
	DDRC = 0xFF;
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	84 bb       	out	0x14, r24	; 20
	DDRB |= 0x18;
  e6:	87 b3       	in	r24, 0x17	; 23
  e8:	88 61       	ori	r24, 0x18	; 24
  ea:	87 bb       	out	0x17, r24	; 23
	ControlPin(BPort,3,0);
  ec:	40 e0       	ldi	r20, 0x00	; 0
  ee:	63 e0       	ldi	r22, 0x03	; 3
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	aa df       	rcall	.-172    	; 0x48 <ControlPin>
	ControlPin(BPort,4,0);
  f4:	40 e0       	ldi	r20, 0x00	; 0
  f6:	64 e0       	ldi	r22, 0x04	; 4
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	a6 df       	rcall	.-180    	; 0x48 <ControlPin>
	//UARTSendString("ARDUINO"); /*just for UART test */
	UartSendUdec(GlobalMillTimer);
  fc:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <GlobalMillTimer>
 100:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <GlobalMillTimer+0x1>
 104:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <GlobalMillTimer+0x2>
 108:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <GlobalMillTimer+0x3>
 10c:	60 d0       	rcall	.+192    	; 0x1ce <UartSendUdec>
	UartSendNewLine();
 10e:	5a d0       	rcall	.+180    	; 0x1c4 <UartSendNewLine>
			PrintStatus("PortC Current State", 0 , PORTC + 0x30);
			PrintStatus("Timer Status", 1, GlobalMillTimer);
		}
	}
#endif
	i = UARTReceiveChar();
 110:	79 d0       	rcall	.+242    	; 0x204 <UARTReceiveChar>
 112:	89 83       	std	Y+1, r24	; 0x01
	
	if (oldi != i )
 114:	9a 81       	ldd	r25, Y+2	; 0x02
 116:	89 81       	ldd	r24, Y+1	; 0x01
 118:	98 17       	cp	r25, r24
 11a:	d1 f3       	breq	.-12     	; 0x110 <main+0x46>
	{
		//PrintStatus("",0, i);
		UARTSendChar(i);
 11c:	89 81       	ldd	r24, Y+1	; 0x01
 11e:	4e d0       	rcall	.+156    	; 0x1bc <UARTSendChar>
		if(i=='F')
 120:	89 81       	ldd	r24, Y+1	; 0x01
 122:	86 34       	cpi	r24, 0x46	; 70
 124:	29 f4       	brne	.+10     	; 0x130 <main+0x66>
		{
			ControlPin(CPort,5,true);
 126:	41 e0       	ldi	r20, 0x01	; 1
 128:	65 e0       	ldi	r22, 0x05	; 5
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	8d df       	rcall	.-230    	; 0x48 <ControlPin>
 12e:	07 c0       	rjmp	.+14     	; 0x13e <main+0x74>
		}
		else if (i== 'G')
 130:	89 81       	ldd	r24, Y+1	; 0x01
 132:	87 34       	cpi	r24, 0x47	; 71
 134:	21 f4       	brne	.+8      	; 0x13e <main+0x74>
		{
			ControlPin(CPort,5,false);
 136:	40 e0       	ldi	r20, 0x00	; 0
 138:	65 e0       	ldi	r22, 0x05	; 5
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	85 df       	rcall	.-246    	; 0x48 <ControlPin>
		}

		oldi = i;
 13e:	89 81       	ldd	r24, Y+1	; 0x01
 140:	8a 83       	std	Y+2, r24	; 0x02
 142:	e6 cf       	rjmp	.-52     	; 0x110 <main+0x46>

00000144 <Timer0Init>:
#include <avr/interrupt.h>
#include <avr/io.h>
volatile uint32_t GlobalMillTimer = 0;
void Timer0Init (void)
{
	TCCR0 = (1<<CS01)|(1<<CS00);
 144:	83 e0       	ldi	r24, 0x03	; 3
 146:	83 bf       	out	0x33, r24	; 51
	TCNT0 = (193);
 148:	81 ec       	ldi	r24, 0xC1	; 193
 14a:	82 bf       	out	0x32, r24	; 50
	TIMSK |= (1<<TOIE0);
 14c:	89 b7       	in	r24, 0x39	; 57
 14e:	81 60       	ori	r24, 0x01	; 1
 150:	89 bf       	out	0x39, r24	; 57
 152:	08 95       	ret

00000154 <__vector_9>:
}
	
ISR(TIMER0_OVF_vect)
{
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
 162:	af 93       	push	r26
 164:	bf 93       	push	r27
	GlobalMillTimer ++;
 166:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <GlobalMillTimer>
 16a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <GlobalMillTimer+0x1>
 16e:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <GlobalMillTimer+0x2>
 172:	b0 91 65 00 	lds	r27, 0x0065	; 0x800065 <GlobalMillTimer+0x3>
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	a1 1d       	adc	r26, r1
 17a:	b1 1d       	adc	r27, r1
 17c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <GlobalMillTimer>
 180:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <GlobalMillTimer+0x1>
 184:	a0 93 64 00 	sts	0x0064, r26	; 0x800064 <GlobalMillTimer+0x2>
 188:	b0 93 65 00 	sts	0x0065, r27	; 0x800065 <GlobalMillTimer+0x3>
	TCNT0 = (193);
 18c:	81 ec       	ldi	r24, 0xC1	; 193
 18e:	82 bf       	out	0x32, r24	; 50
 190:	bf 91       	pop	r27
 192:	af 91       	pop	r26
 194:	9f 91       	pop	r25
 196:	8f 91       	pop	r24
 198:	0f 90       	pop	r0
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	0f 90       	pop	r0
 19e:	1f 90       	pop	r1
 1a0:	18 95       	reti

000001a2 <UARTInit>:
void UARTSendString(char* myString){
	while(*myString){
		UARTSendChar(*myString);
		myString++;
	}
}
 1a2:	1b b8       	out	0x0b, r1	; 11
 1a4:	1a b8       	out	0x0a, r1	; 10
 1a6:	10 bc       	out	0x20, r1	; 32
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	8b b9       	out	0x0b, r24	; 11
 1ac:	10 bc       	out	0x20, r1	; 32
 1ae:	8c e0       	ldi	r24, 0x0C	; 12
 1b0:	89 b9       	out	0x09, r24	; 9
 1b2:	88 e1       	ldi	r24, 0x18	; 24
 1b4:	8a b9       	out	0x0a, r24	; 10
 1b6:	86 e8       	ldi	r24, 0x86	; 134
 1b8:	80 bd       	out	0x20, r24	; 32
 1ba:	08 95       	ret

000001bc <UARTSendChar>:
 1bc:	5d 9b       	sbis	0x0b, 5	; 11
 1be:	fe cf       	rjmp	.-4      	; 0x1bc <UARTSendChar>
 1c0:	8c b9       	out	0x0c, r24	; 12
 1c2:	08 95       	ret

000001c4 <UartSendNewLine>:
void UartSendNewLine(void){
	UARTSendChar(CR);
 1c4:	8d e0       	ldi	r24, 0x0D	; 13
 1c6:	fa df       	rcall	.-12     	; 0x1bc <UARTSendChar>
	UARTSendChar(LF);
 1c8:	8a e0       	ldi	r24, 0x0A	; 10
 1ca:	f8 df       	rcall	.-16     	; 0x1bc <UARTSendChar>
 1cc:	08 95       	ret

000001ce <UartSendUdec>:
}

void UartSendUdec(uint32_t n)
{
 1ce:	0f 93       	push	r16
 1d0:	1f 93       	push	r17
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
	// This function uses recursion to convert decimal number
	//   of unspecified length as an ASCII string
	if(n >= 10){
 1d6:	6a 30       	cpi	r22, 0x0A	; 10
 1d8:	71 05       	cpc	r23, r1
 1da:	81 05       	cpc	r24, r1
 1dc:	91 05       	cpc	r25, r1
 1de:	50 f0       	brcs	.+20     	; 0x1f4 <UartSendUdec+0x26>
		UartSendUdec(n/10);
 1e0:	2a e0       	ldi	r18, 0x0A	; 10
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	40 e0       	ldi	r20, 0x00	; 0
 1e6:	50 e0       	ldi	r21, 0x00	; 0
 1e8:	11 d0       	rcall	.+34     	; 0x20c <__udivmodsi4>
 1ea:	06 2f       	mov	r16, r22
 1ec:	ca 01       	movw	r24, r20
 1ee:	b9 01       	movw	r22, r18
 1f0:	ee df       	rcall	.-36     	; 0x1ce <UartSendUdec>
		n = n%10;
 1f2:	60 2f       	mov	r22, r16
	}
	UARTSendChar(n+'0'); //GlobalMillTimer is between 0 and 9
 1f4:	80 e3       	ldi	r24, 0x30	; 48
 1f6:	86 0f       	add	r24, r22
 1f8:	e1 df       	rcall	.-62     	; 0x1bc <UARTSendChar>


}
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	1f 91       	pop	r17
 200:	0f 91       	pop	r16
 202:	08 95       	ret

00000204 <UARTReceiveChar>:
char UARTReceiveChar(void)
{
	char MyRead = 0;
	while ( !(UCSRA & (1<<RXC)) ){}
 204:	5f 9b       	sbis	0x0b, 7	; 11
 206:	fe cf       	rjmp	.-4      	; 0x204 <UARTReceiveChar>
	MyRead = UDR;
 208:	8c b1       	in	r24, 0x0c	; 12
	return MyRead;
}
 20a:	08 95       	ret

0000020c <__udivmodsi4>:
 20c:	a1 e2       	ldi	r26, 0x21	; 33
 20e:	1a 2e       	mov	r1, r26
 210:	aa 1b       	sub	r26, r26
 212:	bb 1b       	sub	r27, r27
 214:	fd 01       	movw	r30, r26
 216:	0d c0       	rjmp	.+26     	; 0x232 <__udivmodsi4_ep>

00000218 <__udivmodsi4_loop>:
 218:	aa 1f       	adc	r26, r26
 21a:	bb 1f       	adc	r27, r27
 21c:	ee 1f       	adc	r30, r30
 21e:	ff 1f       	adc	r31, r31
 220:	a2 17       	cp	r26, r18
 222:	b3 07       	cpc	r27, r19
 224:	e4 07       	cpc	r30, r20
 226:	f5 07       	cpc	r31, r21
 228:	20 f0       	brcs	.+8      	; 0x232 <__udivmodsi4_ep>
 22a:	a2 1b       	sub	r26, r18
 22c:	b3 0b       	sbc	r27, r19
 22e:	e4 0b       	sbc	r30, r20
 230:	f5 0b       	sbc	r31, r21

00000232 <__udivmodsi4_ep>:
 232:	66 1f       	adc	r22, r22
 234:	77 1f       	adc	r23, r23
 236:	88 1f       	adc	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	1a 94       	dec	r1
 23c:	69 f7       	brne	.-38     	; 0x218 <__udivmodsi4_loop>
 23e:	60 95       	com	r22
 240:	70 95       	com	r23
 242:	80 95       	com	r24
 244:	90 95       	com	r25
 246:	9b 01       	movw	r18, r22
 248:	ac 01       	movw	r20, r24
 24a:	bd 01       	movw	r22, r26
 24c:	cf 01       	movw	r24, r30
 24e:	08 95       	ret

00000250 <_exit>:
 250:	f8 94       	cli

00000252 <__stop_program>:
 252:	ff cf       	rjmp	.-2      	; 0x252 <__stop_program>
