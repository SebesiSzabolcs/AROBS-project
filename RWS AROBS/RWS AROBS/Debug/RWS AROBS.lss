
RWS AROBS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000002f2  00000386  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800078  00800078  0000039e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000039e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a54  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000731  00000000  00000000  00000f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000517  00000000  00000000  00001631  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  00001b48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000430  00000000  00000000  00001c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000265  00000000  00000000  000020b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002319  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	e5 c0       	rjmp	.+458    	; 0x1de <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 ef       	ldi	r30, 0xF2	; 242
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a8 37       	cpi	r26, 0x78	; 120
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a8 e7       	ldi	r26, 0x78	; 120
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ae 37       	cpi	r26, 0x7E	; 126
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	6a d0       	rcall	.+212    	; 0x12e <main>
  5a:	49 c1       	rjmp	.+658    	; 0x2ee <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <ControlPin>:
} 
}
void ControlPin(EN_Port_Type Port2Control, uint8_t pinNr, bool pinState)
{
	static uint16_t counter = 0;
	counter++;
  5e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__data_end>
  62:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__data_end+0x1>
  66:	2f 5f       	subi	r18, 0xFF	; 255
  68:	3f 4f       	sbci	r19, 0xFF	; 255
  6a:	30 93 79 00 	sts	0x0079, r19	; 0x800079 <__data_end+0x1>
  6e:	20 93 78 00 	sts	0x0078, r18	; 0x800078 <__data_end>
	switch(Port2Control) {
  72:	82 30       	cpi	r24, 0x02	; 2
  74:	f1 f0       	breq	.+60     	; 0xb2 <ControlPin+0x54>
  76:	83 30       	cpi	r24, 0x03	; 3
  78:	a9 f1       	breq	.+106    	; 0xe4 <ControlPin+0x86>
  7a:	81 30       	cpi	r24, 0x01	; 1
  7c:	09 f0       	breq	.+2      	; 0x80 <ControlPin+0x22>
  7e:	4a c0       	rjmp	.+148    	; 0x114 <ControlPin+0xb6>
		case (BPort):
			if (pinState) {
  80:	44 23       	and	r20, r20
  82:	59 f0       	breq	.+22     	; 0x9a <ControlPin+0x3c>
				SETPORTB(pinNr);
  84:	28 b3       	in	r18, 0x18	; 24
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	02 c0       	rjmp	.+4      	; 0x90 <ControlPin+0x32>
  8c:	88 0f       	add	r24, r24
  8e:	99 1f       	adc	r25, r25
  90:	6a 95       	dec	r22
  92:	e2 f7       	brpl	.-8      	; 0x8c <ControlPin+0x2e>
  94:	82 2b       	or	r24, r18
  96:	88 bb       	out	0x18, r24	; 24
  98:	08 95       	ret
			} else {
				CLEARPORTB(pinNr);
  9a:	28 b3       	in	r18, 0x18	; 24
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <ControlPin+0x48>
  a2:	88 0f       	add	r24, r24
  a4:	99 1f       	adc	r25, r25
  a6:	6a 95       	dec	r22
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <ControlPin+0x44>
  aa:	80 95       	com	r24
  ac:	82 23       	and	r24, r18
  ae:	88 bb       	out	0x18, r24	; 24
  b0:	08 95       	ret
			}
		break;
		case(CPort):
			if(pinState){
  b2:	44 23       	and	r20, r20
  b4:	59 f0       	breq	.+22     	; 0xcc <ControlPin+0x6e>
				SETPORTC(pinNr);
  b6:	25 b3       	in	r18, 0x15	; 21
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <ControlPin+0x64>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <ControlPin+0x60>
  c6:	82 2b       	or	r24, r18
  c8:	85 bb       	out	0x15, r24	; 21
  ca:	08 95       	ret
			} else {
				CLEARPORTC(pinNr);	
  cc:	25 b3       	in	r18, 0x15	; 21
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <ControlPin+0x7a>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	6a 95       	dec	r22
  da:	e2 f7       	brpl	.-8      	; 0xd4 <ControlPin+0x76>
  dc:	80 95       	com	r24
  de:	82 23       	and	r24, r18
  e0:	85 bb       	out	0x15, r24	; 21
  e2:	08 95       	ret
			}
		break;
		case (DPort):
			if(pinState){
  e4:	44 23       	and	r20, r20
  e6:	59 f0       	breq	.+22     	; 0xfe <ControlPin+0xa0>
				SETPORTD(pinNr);
  e8:	22 b3       	in	r18, 0x12	; 18
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <ControlPin+0x96>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <ControlPin+0x92>
  f8:	82 2b       	or	r24, r18
  fa:	82 bb       	out	0x12, r24	; 18
  fc:	08 95       	ret
			}else{
				CLEARPORTD(pinNr);
  fe:	22 b3       	in	r18, 0x12	; 18
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <ControlPin+0xac>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <ControlPin+0xa8>
 10e:	80 95       	com	r24
 110:	82 23       	and	r24, r18
 112:	82 bb       	out	0x12, r24	; 18
 114:	08 95       	ret

00000116 <EspOff>:
	}
	UartSendNewLine();
}
void EspOff(void)
{
	DDRD |= 0XC0;
 116:	81 b3       	in	r24, 0x11	; 17
 118:	80 6c       	ori	r24, 0xC0	; 192
 11a:	81 bb       	out	0x11, r24	; 17
	ControlPin(ESP_RESET_PORT,ESP_RESET_PIN,0);
 11c:	40 e0       	ldi	r20, 0x00	; 0
 11e:	67 e0       	ldi	r22, 0x07	; 7
 120:	83 e0       	ldi	r24, 0x03	; 3
 122:	9d df       	rcall	.-198    	; 0x5e <ControlPin>
	ControlPin(ESP_ENABLE_PORT,ESP_ENABLE_PIN,0);	
 124:	40 e0       	ldi	r20, 0x00	; 0
 126:	66 e0       	ldi	r22, 0x06	; 6
 128:	83 e0       	ldi	r24, 0x03	; 3
 12a:	99 df       	rcall	.-206    	; 0x5e <ControlPin>
 12c:	08 95       	ret

0000012e <main>:
}

int main(void)
{
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	1f 92       	push	r1
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
	static char pinstate = true;
	volatile unsigned char i; 
	volatile unsigned char oldi = 0; //to check when the i variable change the value
 138:	19 82       	std	Y+1, r1	; 0x01
	DDRD |= (1<< STATUS_LED_PIN);
 13a:	8c 9a       	sbi	0x11, 4	; 17
	cli();
 13c:	f8 94       	cli
	Timer0Init();
 13e:	47 d0       	rcall	.+142    	; 0x1ce <Timer0Init>
	UARTInit(MyUBBR);
 140:	8c e0       	ldi	r24, 0x0C	; 12
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	73 d0       	rcall	.+230    	; 0x22c <UARTInit>
	sei();
 146:	78 94       	sei
	EspOff();	
 148:	e6 df       	rcall	.-52     	; 0x116 <EspOff>
	UartSendUdec(GlobalMillTimer);
 14a:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <GlobalMillTimer>
 14e:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <GlobalMillTimer+0x1>
 152:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <GlobalMillTimer+0x2>
 156:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <GlobalMillTimer+0x3>
 15a:	8c d0       	rcall	.+280    	; 0x274 <UartSendUdec>
	UartSendNewLine();
 15c:	86 d0       	rcall	.+268    	; 0x26a <UartSendNewLine>
    /* Replace with your application code */
    while (1) 
    {
#if 1
		if ((GlobalMillTimer % 1000) == 0) 
 15e:	0f 2e       	mov	r0, r31
 160:	f8 ee       	ldi	r31, 0xE8	; 232
 162:	cf 2e       	mov	r12, r31
 164:	f3 e0       	ldi	r31, 0x03	; 3
 166:	df 2e       	mov	r13, r31
 168:	e1 2c       	mov	r14, r1
 16a:	f1 2c       	mov	r15, r1
 16c:	f0 2d       	mov	r31, r0
		{	
			pinstate^=1;
 16e:	11 e0       	ldi	r17, 0x01	; 1
	UartSendNewLine();
    /* Replace with your application code */
    while (1) 
    {
#if 1
		if ((GlobalMillTimer % 1000) == 0) 
 170:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <GlobalMillTimer>
 174:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <GlobalMillTimer+0x1>
 178:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <GlobalMillTimer+0x2>
 17c:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <GlobalMillTimer+0x3>
 180:	a7 01       	movw	r20, r14
 182:	96 01       	movw	r18, r12
 184:	92 d0       	rcall	.+292    	; 0x2aa <__udivmodsi4>
 186:	67 2b       	or	r22, r23
 188:	68 2b       	or	r22, r24
 18a:	69 2b       	or	r22, r25
 18c:	89 f7       	brne	.-30     	; 0x170 <main+0x42>
		{	
			pinstate^=1;
 18e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 192:	81 27       	eor	r24, r17
 194:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			if(pinstate){ControlPin(STATUS_LED_PORT,STATUS_LED_PIN,true);}
 198:	88 23       	and	r24, r24
 19a:	29 f0       	breq	.+10     	; 0x1a6 <main+0x78>
 19c:	41 2f       	mov	r20, r17
 19e:	64 e0       	ldi	r22, 0x04	; 4
 1a0:	83 e0       	ldi	r24, 0x03	; 3
 1a2:	5d df       	rcall	.-326    	; 0x5e <ControlPin>
 1a4:	04 c0       	rjmp	.+8      	; 0x1ae <main+0x80>
			else{ControlPin(STATUS_LED_PORT,STATUS_LED_PIN,false);}
 1a6:	40 e0       	ldi	r20, 0x00	; 0
 1a8:	64 e0       	ldi	r22, 0x04	; 4
 1aa:	83 e0       	ldi	r24, 0x03	; 3
 1ac:	58 df       	rcall	.-336    	; 0x5e <ControlPin>
			PrintStatus("Timer current value: ",1, GlobalMillTimer);
 1ae:	80 90 7a 00 	lds	r8, 0x007A	; 0x80007a <GlobalMillTimer>
 1b2:	90 90 7b 00 	lds	r9, 0x007B	; 0x80007b <GlobalMillTimer+0x1>
 1b6:	a0 90 7c 00 	lds	r10, 0x007C	; 0x80007c <GlobalMillTimer+0x2>
 1ba:	b0 90 7d 00 	lds	r11, 0x007D	; 0x80007d <GlobalMillTimer+0x3>
	FPort } EN_Port_Type;
	
void ControlPin(EN_Port_Type Port2Control, uint8_t pinNr, bool pinState);
static void PrintStatus(char* MyString, uint8_t Devider, uint32_t MyValue)
{
	UARTSendString(MyString);
 1be:	81 e6       	ldi	r24, 0x61	; 97
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	45 d0       	rcall	.+138    	; 0x24e <UARTSendString>
	//UARTSendString(": ");
	
	if (Devider == 1)
	{
		UartSendUdec(MyValue);
 1c4:	c5 01       	movw	r24, r10
 1c6:	b4 01       	movw	r22, r8
 1c8:	55 d0       	rcall	.+170    	; 0x274 <UartSendUdec>
	} 
	else 
	{
		UARTSendChar((uint8_t)MyValue);
	}
	UartSendNewLine();
 1ca:	4f d0       	rcall	.+158    	; 0x26a <UartSendNewLine>
 1cc:	d1 cf       	rjmp	.-94     	; 0x170 <main+0x42>

000001ce <Timer0Init>:
#include <avr/interrupt.h>
#include <avr/io.h>
volatile uint32_t GlobalMillTimer = 0;
void Timer0Init (void)
{
	TCCR0 = (1<<CS01)|(1<<CS00);
 1ce:	83 e0       	ldi	r24, 0x03	; 3
 1d0:	83 bf       	out	0x33, r24	; 51
	TCNT0 = (193);
 1d2:	81 ec       	ldi	r24, 0xC1	; 193
 1d4:	82 bf       	out	0x32, r24	; 50
	TIMSK |= (1<<TOIE0);
 1d6:	89 b7       	in	r24, 0x39	; 57
 1d8:	81 60       	ori	r24, 0x01	; 1
 1da:	89 bf       	out	0x39, r24	; 57
 1dc:	08 95       	ret

000001de <__vector_9>:
}
	
ISR(TIMER0_OVF_vect)
{
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	8f 93       	push	r24
 1ea:	9f 93       	push	r25
 1ec:	af 93       	push	r26
 1ee:	bf 93       	push	r27
	GlobalMillTimer ++;
 1f0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <GlobalMillTimer>
 1f4:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <GlobalMillTimer+0x1>
 1f8:	a0 91 7c 00 	lds	r26, 0x007C	; 0x80007c <GlobalMillTimer+0x2>
 1fc:	b0 91 7d 00 	lds	r27, 0x007D	; 0x80007d <GlobalMillTimer+0x3>
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	a1 1d       	adc	r26, r1
 204:	b1 1d       	adc	r27, r1
 206:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <GlobalMillTimer>
 20a:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <GlobalMillTimer+0x1>
 20e:	a0 93 7c 00 	sts	0x007C, r26	; 0x80007c <GlobalMillTimer+0x2>
 212:	b0 93 7d 00 	sts	0x007D, r27	; 0x80007d <GlobalMillTimer+0x3>
	TCNT0 = (193);
 216:	81 ec       	ldi	r24, 0xC1	; 193
 218:	82 bf       	out	0x32, r24	; 50
 21a:	bf 91       	pop	r27
 21c:	af 91       	pop	r26
 21e:	9f 91       	pop	r25
 220:	8f 91       	pop	r24
 222:	0f 90       	pop	r0
 224:	0f be       	out	0x3f, r0	; 63
 226:	0f 90       	pop	r0
 228:	1f 90       	pop	r1
 22a:	18 95       	reti

0000022c <UARTInit>:
#include "UARTModule.h"
#include <avr/io.h>
#define CR  0X0D
#define LF  0X0A
void UARTInit(uint16_t ubrr){
	UCSRA = 0x00; // turn everything off
 22c:	1b b8       	out	0x0b, r1	; 11
	UCSRB = 0x00;
 22e:	1a b8       	out	0x0a, r1	; 10
	UCSRC = 0x00;
 230:	10 bc       	out	0x20, r1	; 32
	UCSRA = (1<<U2X); // to increase precision use U2X
 232:	82 e0       	ldi	r24, 0x02	; 2
 234:	8b b9       	out	0x0b, r24	; 11
	UBRRH = 0;//(uint8_t)(ubrr>>8);
 236:	10 bc       	out	0x20, r1	; 32
	UBRRL = 12;//(uint8_t)(ubrr);
 238:	8c e0       	ldi	r24, 0x0C	; 12
 23a:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<TXEN)|(1<<RXEN)/*|(1<<RXCIE)*/;
 23c:	88 e1       	ldi	r24, 0x18	; 24
 23e:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
 240:	86 e8       	ldi	r24, 0x86	; 134
 242:	80 bd       	out	0x20, r24	; 32
 244:	08 95       	ret

00000246 <UARTSendChar>:
}

void UARTSendChar(uint8_t uartMessage){
	while (!(UCSRA & (1<<UDRE))){}
 246:	5d 9b       	sbis	0x0b, 5	; 11
 248:	fe cf       	rjmp	.-4      	; 0x246 <UARTSendChar>
	UDR = uartMessage;
 24a:	8c b9       	out	0x0c, r24	; 12
 24c:	08 95       	ret

0000024e <UARTSendString>:
	
}



void UARTSendString(char* myString){
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	ec 01       	movw	r28, r24
	while(*myString){
 254:	88 81       	ld	r24, Y
 256:	88 23       	and	r24, r24
 258:	29 f0       	breq	.+10     	; 0x264 <UARTSendString+0x16>
 25a:	21 96       	adiw	r28, 0x01	; 1
		UARTSendChar(*myString);
 25c:	f4 df       	rcall	.-24     	; 0x246 <UARTSendChar>
}



void UARTSendString(char* myString){
	while(*myString){
 25e:	89 91       	ld	r24, Y+
 260:	81 11       	cpse	r24, r1
 262:	fc cf       	rjmp	.-8      	; 0x25c <UARTSendString+0xe>
		UARTSendChar(*myString);
		myString++;
	}
}
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <UartSendNewLine>:
void UartSendNewLine(void){
	UARTSendChar(CR);
 26a:	8d e0       	ldi	r24, 0x0D	; 13
 26c:	ec df       	rcall	.-40     	; 0x246 <UARTSendChar>
	UARTSendChar(LF);
 26e:	8a e0       	ldi	r24, 0x0A	; 10
 270:	ea df       	rcall	.-44     	; 0x246 <UARTSendChar>
 272:	08 95       	ret

00000274 <UartSendUdec>:
}

void UartSendUdec(uint32_t n)
{
 274:	0f 93       	push	r16
 276:	1f 93       	push	r17
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
	// This function uses recursion to convert decimal number
	//   of unspecified length as an ASCII string
	if(n >= 10){
 27c:	6a 30       	cpi	r22, 0x0A	; 10
 27e:	71 05       	cpc	r23, r1
 280:	81 05       	cpc	r24, r1
 282:	91 05       	cpc	r25, r1
 284:	50 f0       	brcs	.+20     	; 0x29a <UartSendUdec+0x26>
		UartSendUdec(n/10);
 286:	2a e0       	ldi	r18, 0x0A	; 10
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	40 e0       	ldi	r20, 0x00	; 0
 28c:	50 e0       	ldi	r21, 0x00	; 0
 28e:	0d d0       	rcall	.+26     	; 0x2aa <__udivmodsi4>
 290:	06 2f       	mov	r16, r22
 292:	ca 01       	movw	r24, r20
 294:	b9 01       	movw	r22, r18
 296:	ee df       	rcall	.-36     	; 0x274 <UartSendUdec>
		n = n%10;
 298:	60 2f       	mov	r22, r16
	}
	UARTSendChar(n+'0'); //GlobalMillTimer is between 0 and 9
 29a:	80 e3       	ldi	r24, 0x30	; 48
 29c:	86 0f       	add	r24, r22
 29e:	d3 df       	rcall	.-90     	; 0x246 <UARTSendChar>


}
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	1f 91       	pop	r17
 2a6:	0f 91       	pop	r16
 2a8:	08 95       	ret

000002aa <__udivmodsi4>:
 2aa:	a1 e2       	ldi	r26, 0x21	; 33
 2ac:	1a 2e       	mov	r1, r26
 2ae:	aa 1b       	sub	r26, r26
 2b0:	bb 1b       	sub	r27, r27
 2b2:	fd 01       	movw	r30, r26
 2b4:	0d c0       	rjmp	.+26     	; 0x2d0 <__udivmodsi4_ep>

000002b6 <__udivmodsi4_loop>:
 2b6:	aa 1f       	adc	r26, r26
 2b8:	bb 1f       	adc	r27, r27
 2ba:	ee 1f       	adc	r30, r30
 2bc:	ff 1f       	adc	r31, r31
 2be:	a2 17       	cp	r26, r18
 2c0:	b3 07       	cpc	r27, r19
 2c2:	e4 07       	cpc	r30, r20
 2c4:	f5 07       	cpc	r31, r21
 2c6:	20 f0       	brcs	.+8      	; 0x2d0 <__udivmodsi4_ep>
 2c8:	a2 1b       	sub	r26, r18
 2ca:	b3 0b       	sbc	r27, r19
 2cc:	e4 0b       	sbc	r30, r20
 2ce:	f5 0b       	sbc	r31, r21

000002d0 <__udivmodsi4_ep>:
 2d0:	66 1f       	adc	r22, r22
 2d2:	77 1f       	adc	r23, r23
 2d4:	88 1f       	adc	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	1a 94       	dec	r1
 2da:	69 f7       	brne	.-38     	; 0x2b6 <__udivmodsi4_loop>
 2dc:	60 95       	com	r22
 2de:	70 95       	com	r23
 2e0:	80 95       	com	r24
 2e2:	90 95       	com	r25
 2e4:	9b 01       	movw	r18, r22
 2e6:	ac 01       	movw	r20, r24
 2e8:	bd 01       	movw	r22, r26
 2ea:	cf 01       	movw	r24, r30
 2ec:	08 95       	ret

000002ee <_exit>:
 2ee:	f8 94       	cli

000002f0 <__stop_program>:
 2f0:	ff cf       	rjmp	.-2      	; 0x2f0 <__stop_program>
