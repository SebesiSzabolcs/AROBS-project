
RWS AROBS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000288  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000288  0000031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080006e  0080006e  0000032a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000032a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000035c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ac5  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000077b  00000000  00000000  00000ef5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000053f  00000000  00000000  00001670  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  00001bb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000466  00000000  00000000  00001ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000270  00000000  00000000  00002132  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000023a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	ae c0       	rjmp	.+348    	; 0x170 <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 e8       	ldi	r30, 0x88	; 136
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ae 36       	cpi	r26, 0x6E	; 110
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	ae e6       	ldi	r26, 0x6E	; 110
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 37       	cpi	r26, 0x74	; 116
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	43 d0       	rcall	.+134    	; 0xe0 <main>
  5a:	14 c1       	rjmp	.+552    	; 0x284 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <ControlPin>:
}
}
void ControlPin(EN_Port_Type Port2Control, uint8_t pinNr, bool pinState)
{
	static uint16_t counter = 0;
	counter++;
  5e:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <__data_end>
  62:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <__data_end+0x1>
  66:	2f 5f       	subi	r18, 0xFF	; 255
  68:	3f 4f       	sbci	r19, 0xFF	; 255
  6a:	30 93 6f 00 	sts	0x006F, r19	; 0x80006f <__data_end+0x1>
  6e:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <__data_end>
	switch(Port2Control) {
  72:	81 30       	cpi	r24, 0x01	; 1
  74:	19 f0       	breq	.+6      	; 0x7c <ControlPin+0x1e>
  76:	82 30       	cpi	r24, 0x02	; 2
  78:	d1 f0       	breq	.+52     	; 0xae <ControlPin+0x50>
  7a:	08 95       	ret
		case (BPort):
			if (pinState) {
  7c:	44 23       	and	r20, r20
  7e:	59 f0       	breq	.+22     	; 0x96 <ControlPin+0x38>
				SETPORTB(pinNr);
  80:	28 b3       	in	r18, 0x18	; 24
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	02 c0       	rjmp	.+4      	; 0x8c <ControlPin+0x2e>
  88:	88 0f       	add	r24, r24
  8a:	99 1f       	adc	r25, r25
  8c:	6a 95       	dec	r22
  8e:	e2 f7       	brpl	.-8      	; 0x88 <ControlPin+0x2a>
  90:	82 2b       	or	r24, r18
  92:	88 bb       	out	0x18, r24	; 24
  94:	08 95       	ret
			} else {
				CLEARPORTB(pinNr);
  96:	28 b3       	in	r18, 0x18	; 24
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <ControlPin+0x44>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <ControlPin+0x40>
  a6:	80 95       	com	r24
  a8:	82 23       	and	r24, r18
  aa:	88 bb       	out	0x18, r24	; 24
  ac:	08 95       	ret
			}
		break;
		case(CPort):
			if(pinState){
  ae:	44 23       	and	r20, r20
  b0:	59 f0       	breq	.+22     	; 0xc8 <ControlPin+0x6a>
				SETPORTC(pinNr);
  b2:	25 b3       	in	r18, 0x15	; 21
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <ControlPin+0x60>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <ControlPin+0x5c>
  c2:	82 2b       	or	r24, r18
  c4:	85 bb       	out	0x15, r24	; 21
  c6:	08 95       	ret
			} else {
				CLEARPORTC(pinNr);	
  c8:	25 b3       	in	r18, 0x15	; 21
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <ControlPin+0x76>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <ControlPin+0x72>
  d8:	80 95       	com	r24
  da:	82 23       	and	r24, r18
  dc:	85 bb       	out	0x15, r24	; 21
  de:	08 95       	ret

000000e0 <main>:
}
int main(void)
{
	static bool pinstate = true;
	unsigned char i; 
	cli();
  e0:	f8 94       	cli
	Timer0Init();
  e2:	3e d0       	rcall	.+124    	; 0x160 <Timer0Init>
	UARTInit(MyUBBR);
  e4:	8c e0       	ldi	r24, 0x0C	; 12
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	6a d0       	rcall	.+212    	; 0x1be <UARTInit>
	sei();
  ea:	78 94       	sei
	DDRC = 0xFF;
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	84 bb       	out	0x14, r24	; 20
	DDRB |= 0x18;
  f0:	87 b3       	in	r24, 0x17	; 23
  f2:	88 61       	ori	r24, 0x18	; 24
  f4:	87 bb       	out	0x17, r24	; 23
	ControlPin(BPort,3,0);
  f6:	40 e0       	ldi	r20, 0x00	; 0
  f8:	63 e0       	ldi	r22, 0x03	; 3
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	b0 df       	rcall	.-160    	; 0x5e <ControlPin>
	ControlPin(BPort,4,0);
  fe:	40 e0       	ldi	r20, 0x00	; 0
 100:	64 e0       	ldi	r22, 0x04	; 4
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	ac df       	rcall	.-168    	; 0x5e <ControlPin>
	//UARTSendString("ARDUINO"); /*just for UART test */
	UartSendUdec(GlobalMillTimer);
 106:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <GlobalMillTimer>
 10a:	70 91 71 00 	lds	r23, 0x0071	; 0x800071 <GlobalMillTimer+0x1>
 10e:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <GlobalMillTimer+0x2>
 112:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <GlobalMillTimer+0x3>
 116:	77 d0       	rcall	.+238    	; 0x206 <UartSendUdec>
	UartSendNewLine();
 118:	71 d0       	rcall	.+226    	; 0x1fc <UartSendNewLine>
			PrintStatus("PortC Current State", 0 , PORTC + 0x30);
			PrintStatus("Timer Status", 1, GlobalMillTimer);
		}
	}
#endif
	i = UARTReceiveChar();
 11a:	90 d0       	rcall	.+288    	; 0x23c <UARTReceiveChar>
 11c:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	84 e3       	ldi	r24, 0x34	; 52
 122:	9c e0       	ldi	r25, 0x0C	; 12
 124:	21 50       	subi	r18, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <main+0x44>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x4e>
 12e:	00 00       	nop
	_delay_ms(1000);
	if(i=='F')
 130:	c6 34       	cpi	r28, 0x46	; 70
 132:	29 f4       	brne	.+10     	; 0x13e <main+0x5e>
	{
		ControlPin(CPort,5,true);
 134:	41 e0       	ldi	r20, 0x01	; 1
 136:	65 e0       	ldi	r22, 0x05	; 5
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	91 df       	rcall	.-222    	; 0x5e <ControlPin>
 13c:	ee cf       	rjmp	.-36     	; 0x11a <main+0x3a>
	}
	else if (i== 'G')
 13e:	c7 34       	cpi	r28, 0x47	; 71
 140:	29 f4       	brne	.+10     	; 0x14c <main+0x6c>
	{
		ControlPin(CPort,5,false);
 142:	40 e0       	ldi	r20, 0x00	; 0
 144:	65 e0       	ldi	r22, 0x05	; 5
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	8a df       	rcall	.-236    	; 0x5e <ControlPin>
 14a:	e7 cf       	rjmp	.-50     	; 0x11a <main+0x3a>
	FPort } EN_Port_Type;
	
void ControlPin(EN_Port_Type Port2Control, uint8_t pinNr, bool pinState);
static void PrintStatus(char* MyString, uint8_t Devider, uint32_t MyValue)
{
	UARTSendString(MyString);
 14c:	80 e6       	ldi	r24, 0x60	; 96
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	47 d0       	rcall	.+142    	; 0x1e0 <UARTSendString>
	UARTSendString(": ");
 152:	8b e6       	ldi	r24, 0x6B	; 107
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	44 d0       	rcall	.+136    	; 0x1e0 <UARTSendString>
	{
		UartSendUdec(MyValue);
	} 
	else 
	{
		UARTSendChar((uint8_t)MyValue);
 158:	8c 2f       	mov	r24, r28
 15a:	3e d0       	rcall	.+124    	; 0x1d8 <UARTSendChar>
	}
	UartSendNewLine();
 15c:	4f d0       	rcall	.+158    	; 0x1fc <UartSendNewLine>
 15e:	dd cf       	rjmp	.-70     	; 0x11a <main+0x3a>

00000160 <Timer0Init>:
#include <avr/interrupt.h>
#include <avr/io.h>
volatile uint32_t GlobalMillTimer = 0;
void Timer0Init (void)
{
	TCCR0 = (1<<CS01)|(1<<CS00);
 160:	83 e0       	ldi	r24, 0x03	; 3
 162:	83 bf       	out	0x33, r24	; 51
	TCNT0 = (193);
 164:	81 ec       	ldi	r24, 0xC1	; 193
 166:	82 bf       	out	0x32, r24	; 50
	TIMSK |= (1<<TOIE0);
 168:	89 b7       	in	r24, 0x39	; 57
 16a:	81 60       	ori	r24, 0x01	; 1
 16c:	89 bf       	out	0x39, r24	; 57
 16e:	08 95       	ret

00000170 <__vector_9>:
}
	
ISR(TIMER0_OVF_vect)
{
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	8f 93       	push	r24
 17c:	9f 93       	push	r25
 17e:	af 93       	push	r26
 180:	bf 93       	push	r27
	GlobalMillTimer ++;
 182:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <GlobalMillTimer>
 186:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <GlobalMillTimer+0x1>
 18a:	a0 91 72 00 	lds	r26, 0x0072	; 0x800072 <GlobalMillTimer+0x2>
 18e:	b0 91 73 00 	lds	r27, 0x0073	; 0x800073 <GlobalMillTimer+0x3>
 192:	01 96       	adiw	r24, 0x01	; 1
 194:	a1 1d       	adc	r26, r1
 196:	b1 1d       	adc	r27, r1
 198:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <GlobalMillTimer>
 19c:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <GlobalMillTimer+0x1>
 1a0:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <GlobalMillTimer+0x2>
 1a4:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <GlobalMillTimer+0x3>
	TCNT0 = (193);
 1a8:	81 ec       	ldi	r24, 0xC1	; 193
 1aa:	82 bf       	out	0x32, r24	; 50
 1ac:	bf 91       	pop	r27
 1ae:	af 91       	pop	r26
 1b0:	9f 91       	pop	r25
 1b2:	8f 91       	pop	r24
 1b4:	0f 90       	pop	r0
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	0f 90       	pop	r0
 1ba:	1f 90       	pop	r1
 1bc:	18 95       	reti

000001be <UARTInit>:
#include "UARTModule.h"
#include <avr/io.h>
#define CR  0X0D
#define LF  0X0A
void UARTInit(uint16_t ubrr){
	UCSRA = 0x00; // turn everything off
 1be:	1b b8       	out	0x0b, r1	; 11
	UCSRB = 0x00;
 1c0:	1a b8       	out	0x0a, r1	; 10
	UCSRC = 0x00;
 1c2:	10 bc       	out	0x20, r1	; 32
	UCSRA = (1<<U2X); // to increase precision use U2X
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	8b b9       	out	0x0b, r24	; 11
	UBRRH = 0;//(uint8_t)(ubrr>>8);
 1c8:	10 bc       	out	0x20, r1	; 32
	UBRRL = 12;//(uint8_t)(ubrr);
 1ca:	8c e0       	ldi	r24, 0x0C	; 12
 1cc:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<TXEN)|(1<<RXEN)/*|(1<<RXCIE)*/;
 1ce:	88 e1       	ldi	r24, 0x18	; 24
 1d0:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
 1d2:	86 e8       	ldi	r24, 0x86	; 134
 1d4:	80 bd       	out	0x20, r24	; 32
 1d6:	08 95       	ret

000001d8 <UARTSendChar>:
}

void UARTSendChar(uint8_t uartMessage){
	while (!(UCSRA & (1<<UDRE))){}
 1d8:	5d 9b       	sbis	0x0b, 5	; 11
 1da:	fe cf       	rjmp	.-4      	; 0x1d8 <UARTSendChar>
	UDR = uartMessage;
 1dc:	8c b9       	out	0x0c, r24	; 12
 1de:	08 95       	ret

000001e0 <UARTSendString>:
	
}



void UARTSendString(char* myString){
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	ec 01       	movw	r28, r24
	while(*myString){
 1e6:	88 81       	ld	r24, Y
 1e8:	88 23       	and	r24, r24
 1ea:	29 f0       	breq	.+10     	; 0x1f6 <UARTSendString+0x16>
 1ec:	21 96       	adiw	r28, 0x01	; 1
		UARTSendChar(*myString);
 1ee:	f4 df       	rcall	.-24     	; 0x1d8 <UARTSendChar>
}



void UARTSendString(char* myString){
	while(*myString){
 1f0:	89 91       	ld	r24, Y+
 1f2:	81 11       	cpse	r24, r1
 1f4:	fc cf       	rjmp	.-8      	; 0x1ee <UARTSendString+0xe>
		UARTSendChar(*myString);
		myString++;
	}
}
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <UartSendNewLine>:
void UartSendNewLine(void){
	UARTSendChar(CR);
 1fc:	8d e0       	ldi	r24, 0x0D	; 13
 1fe:	ec df       	rcall	.-40     	; 0x1d8 <UARTSendChar>
	UARTSendChar(LF);
 200:	8a e0       	ldi	r24, 0x0A	; 10
 202:	ea df       	rcall	.-44     	; 0x1d8 <UARTSendChar>
 204:	08 95       	ret

00000206 <UartSendUdec>:
}

void UartSendUdec(uint32_t n)
{
 206:	0f 93       	push	r16
 208:	1f 93       	push	r17
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
	// This function uses recursion to convert decimal number
	//   of unspecified length as an ASCII string
	if(n >= 10){
 20e:	6a 30       	cpi	r22, 0x0A	; 10
 210:	71 05       	cpc	r23, r1
 212:	81 05       	cpc	r24, r1
 214:	91 05       	cpc	r25, r1
 216:	50 f0       	brcs	.+20     	; 0x22c <UartSendUdec+0x26>
		UartSendUdec(n/10);
 218:	2a e0       	ldi	r18, 0x0A	; 10
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	40 e0       	ldi	r20, 0x00	; 0
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	0f d0       	rcall	.+30     	; 0x240 <__udivmodsi4>
 222:	06 2f       	mov	r16, r22
 224:	ca 01       	movw	r24, r20
 226:	b9 01       	movw	r22, r18
 228:	ee df       	rcall	.-36     	; 0x206 <UartSendUdec>
		n = n%10;
 22a:	60 2f       	mov	r22, r16
	}
	UARTSendChar(n+'0'); //GlobalMillTimer is between 0 and 9
 22c:	80 e3       	ldi	r24, 0x30	; 48
 22e:	86 0f       	add	r24, r22
 230:	d3 df       	rcall	.-90     	; 0x1d8 <UARTSendChar>


}
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	1f 91       	pop	r17
 238:	0f 91       	pop	r16
 23a:	08 95       	ret

0000023c <UARTReceiveChar>:
char UARTReceiveChar(void)
{
	char MyRead = 0;
	MyRead = UDR;
 23c:	8c b1       	in	r24, 0x0c	; 12
	return MyRead;
}
 23e:	08 95       	ret

00000240 <__udivmodsi4>:
 240:	a1 e2       	ldi	r26, 0x21	; 33
 242:	1a 2e       	mov	r1, r26
 244:	aa 1b       	sub	r26, r26
 246:	bb 1b       	sub	r27, r27
 248:	fd 01       	movw	r30, r26
 24a:	0d c0       	rjmp	.+26     	; 0x266 <__udivmodsi4_ep>

0000024c <__udivmodsi4_loop>:
 24c:	aa 1f       	adc	r26, r26
 24e:	bb 1f       	adc	r27, r27
 250:	ee 1f       	adc	r30, r30
 252:	ff 1f       	adc	r31, r31
 254:	a2 17       	cp	r26, r18
 256:	b3 07       	cpc	r27, r19
 258:	e4 07       	cpc	r30, r20
 25a:	f5 07       	cpc	r31, r21
 25c:	20 f0       	brcs	.+8      	; 0x266 <__udivmodsi4_ep>
 25e:	a2 1b       	sub	r26, r18
 260:	b3 0b       	sbc	r27, r19
 262:	e4 0b       	sbc	r30, r20
 264:	f5 0b       	sbc	r31, r21

00000266 <__udivmodsi4_ep>:
 266:	66 1f       	adc	r22, r22
 268:	77 1f       	adc	r23, r23
 26a:	88 1f       	adc	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	1a 94       	dec	r1
 270:	69 f7       	brne	.-38     	; 0x24c <__udivmodsi4_loop>
 272:	60 95       	com	r22
 274:	70 95       	com	r23
 276:	80 95       	com	r24
 278:	90 95       	com	r25
 27a:	9b 01       	movw	r18, r22
 27c:	ac 01       	movw	r20, r24
 27e:	bd 01       	movw	r22, r26
 280:	cf 01       	movw	r24, r30
 282:	08 95       	ret

00000284 <_exit>:
 284:	f8 94       	cli

00000286 <__stop_program>:
 286:	ff cf       	rjmp	.-2      	; 0x286 <__stop_program>
