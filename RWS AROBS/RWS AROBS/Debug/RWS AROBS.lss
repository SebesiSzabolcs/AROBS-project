
RWS AROBS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000001e0  00000274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800062  00800062  00000276  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000276  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006de  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005df  00000000  00000000  00000a12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000301  00000000  00000000  00000ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  000012f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037a  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cf  00000000  00000000  000016f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000017c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	97 c0       	rjmp	.+302    	; 0x142 <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 ee       	ldi	r30, 0xE0	; 224
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a8 36       	cpi	r26, 0x68	; 104
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	43 d0       	rcall	.+134    	; 0xe0 <main>
  5a:	c0 c0       	rjmp	.+384    	; 0x1dc <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <ControlPin>:
}
}
void ControlPin(EN_Port_Type Port2Control, uint8_t pinNr, bool pinState)
{
	static uint16_t counter = 0;
	counter++;
  5e:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__data_end>
  62:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__data_end+0x1>
  66:	2f 5f       	subi	r18, 0xFF	; 255
  68:	3f 4f       	sbci	r19, 0xFF	; 255
  6a:	30 93 63 00 	sts	0x0063, r19	; 0x800063 <__data_end+0x1>
  6e:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__data_end>
	switch(Port2Control) {
  72:	81 30       	cpi	r24, 0x01	; 1
  74:	19 f0       	breq	.+6      	; 0x7c <ControlPin+0x1e>
  76:	82 30       	cpi	r24, 0x02	; 2
  78:	d1 f0       	breq	.+52     	; 0xae <ControlPin+0x50>
  7a:	08 95       	ret
		case (BPort):
			if (pinState) {
  7c:	44 23       	and	r20, r20
  7e:	59 f0       	breq	.+22     	; 0x96 <ControlPin+0x38>
				SETPORTB(pinNr);
  80:	28 b3       	in	r18, 0x18	; 24
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	02 c0       	rjmp	.+4      	; 0x8c <ControlPin+0x2e>
  88:	88 0f       	add	r24, r24
  8a:	99 1f       	adc	r25, r25
  8c:	6a 95       	dec	r22
  8e:	e2 f7       	brpl	.-8      	; 0x88 <ControlPin+0x2a>
  90:	82 2b       	or	r24, r18
  92:	88 bb       	out	0x18, r24	; 24
  94:	08 95       	ret
			} else {
				CLEARPORTB(pinNr);
  96:	28 b3       	in	r18, 0x18	; 24
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <ControlPin+0x44>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <ControlPin+0x40>
  a6:	80 95       	com	r24
  a8:	82 23       	and	r24, r18
  aa:	88 bb       	out	0x18, r24	; 24
  ac:	08 95       	ret
			}
		break;
		case(CPort):
			if(pinState){
  ae:	44 23       	and	r20, r20
  b0:	59 f0       	breq	.+22     	; 0xc8 <ControlPin+0x6a>
				SETPORTC(pinNr);
  b2:	25 b3       	in	r18, 0x15	; 21
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <ControlPin+0x60>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <ControlPin+0x5c>
  c2:	82 2b       	or	r24, r18
  c4:	85 bb       	out	0x15, r24	; 21
  c6:	08 95       	ret
			} else {
				CLEARPORTC(pinNr);	
  c8:	25 b3       	in	r18, 0x15	; 21
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <ControlPin+0x76>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <ControlPin+0x72>
  d8:	80 95       	com	r24
  da:	82 23       	and	r24, r18
  dc:	85 bb       	out	0x15, r24	; 21
  de:	08 95       	ret

000000e0 <main>:

int main(void)
{
	static bool pinstate = true;
	unsigned char i; 
	cli();
  e0:	f8 94       	cli
	Timer0Init();
  e2:	25 d0       	rcall	.+74     	; 0x12e <Timer0Init>
	
	sei();
  e4:	78 94       	sei

	DDRC = 0x3F;
  e6:	8f e3       	ldi	r24, 0x3F	; 63
  e8:	84 bb       	out	0x14, r24	; 20
	
    /* Replace with your application code */
    while (1) 
		  
    {	
		if ((GlobalMillTimer % 1000) == 0) 
  ea:	0f 2e       	mov	r0, r31
  ec:	f8 ee       	ldi	r31, 0xE8	; 232
  ee:	cf 2e       	mov	r12, r31
  f0:	f3 e0       	ldi	r31, 0x03	; 3
  f2:	df 2e       	mov	r13, r31
  f4:	e1 2c       	mov	r14, r1
  f6:	f1 2c       	mov	r15, r1
  f8:	f0 2d       	mov	r31, r0
  fa:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <GlobalMillTimer>
  fe:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <GlobalMillTimer+0x1>
 102:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <GlobalMillTimer+0x2>
 106:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <GlobalMillTimer+0x3>
 10a:	a7 01       	movw	r20, r14
 10c:	96 01       	movw	r18, r12
 10e:	44 d0       	rcall	.+136    	; 0x198 <__udivmodsi4>
 110:	67 2b       	or	r22, r23
 112:	68 2b       	or	r22, r24
 114:	69 2b       	or	r22, r25
 116:	89 f7       	brne	.-30     	; 0xfa <main+0x1a>
		{
			ControlPin(CPort,1,pinstate);
 118:	c0 91 60 00 	lds	r28, 0x0060	; 0x800060 <__data_start>
 11c:	4c 2f       	mov	r20, r28
 11e:	61 e0       	ldi	r22, 0x01	; 1
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	9d df       	rcall	.-198    	; 0x5e <ControlPin>
			pinstate^=1;
 124:	41 e0       	ldi	r20, 0x01	; 1
 126:	4c 27       	eor	r20, r28
 128:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <__data_start>
 12c:	e6 cf       	rjmp	.-52     	; 0xfa <main+0x1a>

0000012e <Timer0Init>:
#include <avr/interrupt.h>
#include <avr/io.h>
volatile uint32_t GlobalMillTimer = 0;
void Timer0Init (void)
{
	TCCR0 = (1<<CS01)|(1<<CS00);
 12e:	83 e0       	ldi	r24, 0x03	; 3
 130:	83 bf       	out	0x33, r24	; 51
	TCNT0 = (193);
 132:	81 ec       	ldi	r24, 0xC1	; 193
 134:	82 bf       	out	0x32, r24	; 50
	TIMSK |= (1<<TOIE0);
 136:	89 b7       	in	r24, 0x39	; 57
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	89 bf       	out	0x39, r24	; 57
	DDRC = 0X30;	
 13c:	80 e3       	ldi	r24, 0x30	; 48
 13e:	84 bb       	out	0x14, r24	; 20
 140:	08 95       	ret

00000142 <__vector_9>:
}
	
ISR(TIMER0_OVF_vect)
{
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	af 93       	push	r26
 152:	bf 93       	push	r27
	PORTC ^= 0X30;
 154:	95 b3       	in	r25, 0x15	; 21
 156:	80 e3       	ldi	r24, 0x30	; 48
 158:	89 27       	eor	r24, r25
 15a:	85 bb       	out	0x15, r24	; 21
	GlobalMillTimer ++;
 15c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <GlobalMillTimer>
 160:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <GlobalMillTimer+0x1>
 164:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <GlobalMillTimer+0x2>
 168:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <GlobalMillTimer+0x3>
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	a1 1d       	adc	r26, r1
 170:	b1 1d       	adc	r27, r1
 172:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <GlobalMillTimer>
 176:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <GlobalMillTimer+0x1>
 17a:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <GlobalMillTimer+0x2>
 17e:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <GlobalMillTimer+0x3>
	TCNT0 = (193);
 182:	81 ec       	ldi	r24, 0xC1	; 193
 184:	82 bf       	out	0x32, r24	; 50
 186:	bf 91       	pop	r27
 188:	af 91       	pop	r26
 18a:	9f 91       	pop	r25
 18c:	8f 91       	pop	r24
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <__udivmodsi4>:
 198:	a1 e2       	ldi	r26, 0x21	; 33
 19a:	1a 2e       	mov	r1, r26
 19c:	aa 1b       	sub	r26, r26
 19e:	bb 1b       	sub	r27, r27
 1a0:	fd 01       	movw	r30, r26
 1a2:	0d c0       	rjmp	.+26     	; 0x1be <__udivmodsi4_ep>

000001a4 <__udivmodsi4_loop>:
 1a4:	aa 1f       	adc	r26, r26
 1a6:	bb 1f       	adc	r27, r27
 1a8:	ee 1f       	adc	r30, r30
 1aa:	ff 1f       	adc	r31, r31
 1ac:	a2 17       	cp	r26, r18
 1ae:	b3 07       	cpc	r27, r19
 1b0:	e4 07       	cpc	r30, r20
 1b2:	f5 07       	cpc	r31, r21
 1b4:	20 f0       	brcs	.+8      	; 0x1be <__udivmodsi4_ep>
 1b6:	a2 1b       	sub	r26, r18
 1b8:	b3 0b       	sbc	r27, r19
 1ba:	e4 0b       	sbc	r30, r20
 1bc:	f5 0b       	sbc	r31, r21

000001be <__udivmodsi4_ep>:
 1be:	66 1f       	adc	r22, r22
 1c0:	77 1f       	adc	r23, r23
 1c2:	88 1f       	adc	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	1a 94       	dec	r1
 1c8:	69 f7       	brne	.-38     	; 0x1a4 <__udivmodsi4_loop>
 1ca:	60 95       	com	r22
 1cc:	70 95       	com	r23
 1ce:	80 95       	com	r24
 1d0:	90 95       	com	r25
 1d2:	9b 01       	movw	r18, r22
 1d4:	ac 01       	movw	r20, r24
 1d6:	bd 01       	movw	r22, r26
 1d8:	cf 01       	movw	r24, r30
 1da:	08 95       	ret

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
